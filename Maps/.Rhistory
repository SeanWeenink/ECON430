IRFGraph <- function(endog_data, shock, trend, conf){
# Endogenous data
endog_data <- as.data.frame(endog_data)
# Shock variable
shock <- as.data.frame(shock)
# Estimate linear model
results_lin_iv <- lp_lin_iv(endog_data = endog_data, lags_endog_lin = 12,
shock = shock, trend = trend,
confint = conf, hor = 30)
# Make and save linear plots
# Here I use ggplot rather than plot_lin since I can adjust the scale more easily and add multiple confidence intervals
mean <- as.data.frame(results_lin_iv[[1]]) %>%
gather("id", "mean", 1:30)
low <- as.data.frame(results_lin_iv[[2]]) %>%
gather("id", "low", 1:30)
high <- as.data.frame(results_lin_iv[[3]]) %>%
gather("id", "high", 1:30)
# Create a data frame with the mean, lower cf and upper cf
all <- left_join(mean, low, by="id") %>%
left_join(high, by="id") %>%
mutate(month = seq(1:30))
# Plot the graph
ggplot(data = all, aes(month, mean)) +
geom_ribbon(aes(ymin=low, ymax=high), fill="grey70", alpha=0.4) +
geom_line(aes(month, mean)) +
geom_line()+
geom_point(aes(x=month, y=mean)) + # points for each month
scale_x_continuous(name = "Months since shock", breaks=seq(1:30)) +
scale_y_continuous(name = "% change in unemployment")
}
# Creating and saving the IRF graphs for each state
# create a vector of column names for reference in the for loop
colnames <- colnames(FREDData)
for(i in 1:ncol(FREDData)-1){ # -1 to not include the date column
print(i)  # printing i as a check
#CSVFileName <- paste("./Output/",colnames[i],".png",sep="") # This names the the saved file for each state
print(IRFGraph(FREDData[i],BRWShocks$BRW_monthly, 1, 1.96))# to save the file it needs to display in the plot viewer. print() does this within a for loop or function
#png(CSVFileName)
#dev.off()
}
# Define the function that will calculate the max change in unemployment from each IRF for each state
# This is for use in the map as a color based measure
IRFMax <- function(endog_data, shock, trend, conf){
# Endogenous data
endog_data <- as.data.frame(endog_data)
# Shock variable
shock <- as.data.frame(shock)
# Estimate linear model
results_lin_iv <- lp_lin_iv(endog_data = endog_data, lags_endog_lin = 12,
shock = shock, trend = trend,
confint = conf, hor = 30)
# Calculate the IRF
mean <- as.data.frame(results_lin_iv[[1]]) %>%
gather("id", "mean", 1:30)
# Determine the max change in mean
max <- max(mean$mean)
max
}
IRFMax(FREDData[1],BRWShocks$BRW_monthly, 1, 1.96)
colnames <- colnames(FREDData)
test <- data.frame(c("a"), c("b"))
colnames(test) <- c("state", "max")
for(i in 1:(ncol(FREDData)-1)){ # -1 to not include the date column
result <- c(colnames[i], IRFMax(FREDData[i],BRWShocks$BRW_monthly, 1, 1.96))
test <- test %>%
rbind(result)
}
test <- test[-1,]
colnames(test) <- c("NAME", "max")
###########################################################################
###########################################################################
###                                                                     ###
###                          BRW REPLICATION:                           ###
###                    DATA INPUT AND INITIALIZATION                    ###
###                                                                     ###
###########################################################################
###########################################################################
setwd('C:\Users\seanw\Dropbox\ECON430SeanWeenink\R\ECON430\Maps')
###########################################################################
###########################################################################
###                                                                     ###
###                          BRW REPLICATION:                           ###
###                    DATA INPUT AND INITIALIZATION                    ###
###                                                                     ###
###########################################################################
###########################################################################
setwd('C:/Users/seanw/Dropbox/ECON430SeanWeenink/R/ECON430/Maps')
###########################################################################
###########################################################################
###                                                                     ###
###                          BRW REPLICATION:                           ###
###                    DATA INPUT AND INITIALIZATION                    ###
###                                                                     ###
###########################################################################
###########################################################################
setwd('C:/Users/seanw/Dropbox/ECON430SeanWeenink/R/ECON430/Maps')
# Importing the BRW shock data
BRWShocks <- read.csv('./ShocksData/brw-shock-series.csv')
BRWShocks <- BRWShocks %>%
filter(month < "2018m1") %>%
dplyr::select("month", "BRW_monthly")
BRWShocks <- as.data.frame(BRWShocks)
BRWShocks <- na.omit(BRWShocks)
#sd <- sd(BRWShocks$BRW_monthly) For adjusting the shock size
# Define the function that produces IRF graphs
IRFGraph <- function(endog_data, shock, trend, conf){
# Endogenous data
endog_data <- as.data.frame(endog_data)
# Shock variable
shock <- as.data.frame(shock)
# Estimate linear model
results_lin_iv <- lp_lin_iv(endog_data = endog_data, lags_endog_lin = 12,
shock = shock, trend = trend,
confint = conf, hor = 30)
# Make and save linear plots
# Here I use ggplot rather than plot_lin since I can adjust the scale more easily and add multiple confidence intervals
mean <- as.data.frame(results_lin_iv[[1]]) %>%
gather("id", "mean", 1:30)
low <- as.data.frame(results_lin_iv[[2]]) %>%
gather("id", "low", 1:30)
high <- as.data.frame(results_lin_iv[[3]]) %>%
gather("id", "high", 1:30)
# Create a data frame with the mean, lower cf and upper cf
all <- left_join(mean, low, by="id") %>%
left_join(high, by="id") %>%
mutate(month = seq(1:30))
# Plot the graph
ggplot(data = all, aes(month, mean)) +
geom_ribbon(aes(ymin=low, ymax=high), fill="grey70", alpha=0.4) +
geom_line(aes(month, mean)) +
geom_line()+
geom_point(aes(x=month, y=mean)) + # points for each month
scale_x_continuous(name = "Months since shock", breaks=seq(1:30)) +
scale_y_continuous(name = "% change in unemployment")
}
# Creating and saving the IRF graphs for each state
# create a vector of column names for reference in the for loop
colnames <- colnames(FREDData)
for(i in 1:ncol(FREDData)-1){ # -1 to not include the date column
print(i)  # printing i as a check
#CSVFileName <- paste("./Output/",colnames[i],".png",sep="") # This names the the saved file for each state
print(IRFGraph(FREDData[i],BRWShocks$BRW_monthly, 1, 1.96))# to save the file it needs to display in the plot viewer. print() does this within a for loop or function
#png(CSVFileName)
#dev.off()
}
# Define the function that will calculate the max change in unemployment from each IRF for each state
# This is for use in the map as a color based measure
IRFMax <- function(endog_data, shock, trend, conf){
# Endogenous data
endog_data <- as.data.frame(endog_data)
# Shock variable
shock <- as.data.frame(shock)
# Estimate linear model
results_lin_iv <- lp_lin_iv(endog_data = endog_data, lags_endog_lin = 12,
shock = shock, trend = trend,
confint = conf, hor = 30)
# Calculate the IRF
mean <- as.data.frame(results_lin_iv[[1]]) %>%
gather("id", "mean", 1:30)
# Determine the max change in mean
max <- max(mean$mean)
max
}
IRFMax(FREDData[1],BRWShocks$BRW_monthly, 1, 1.96)
colnames <- colnames(FREDData)
test <- data.frame(c("a"), c("b"))
colnames(test) <- c("state", "max")
for(i in 1:(ncol(FREDData)-1)){ # -1 to not include the date column
result <- c(colnames[i], IRFMax(FREDData[i],BRWShocks$BRW_monthly, 1, 1.96))
test <- test %>%
rbind(result)
}
test <- test[-1,]
colnames(test) <- c("NAME", "max")
setwd('C:/Users/seanw/Dropbox/ECON430SeanWeenink/R/ECON430/Maps')
# Define required packages
packages <- c("bannerCommenter", "gridExtra", "ggpubr", "readxl", "lpirfs", "dplyr", "fredr", "tidyr", "splines", "sandwich", "lmtest", "Matrix")
# Install packages and load libraries
install.packages(setdiff(packages, rownames(installed.packages())))
lapply(packages, require, character.only = TRUE)
# Getting data from FRED:
StartDate = as.Date("1994-01-01") # Start date of the BRW shock series
EndDate = as.Date("2017-12-12") # End date of the BRW shock series\
fredr_set_key("2bf2ff8f666611f4f30b27f3feca9a38")
# Additional series can be added here
FREDCodes <- c("FLUR", "CAUR", "TXUR", "OHUR","NYUR", "MIUR", "PAUR", "NCURN", "WIUR", "ILURN", "MOUR", "NJURN", "ORUR", "TNUR", "MNURN", "ALUR", "SCUR", "WAUR",
"KYURN", "GAUR", "WVUR", "INUR", "COUR", "AZUR", "OKUR", "LAUR", "MAUR", "ARUR", "NMUR", "MTUR", "HIURN", "VAUR", "IAUR", "NVUR", "KSURN",
"IDURN", "MSUR", "MEUR", "CTURN", "UTUR", "AKUR", "MDUR", "SDURN", "NDUR", "NHURN", "NEUR", "WYUR", "DEUR", "VTUR", "RIUR", "PRUR"
)
FREDData <- as.data.frame(lapply(FREDCodes, fredr, observation_start = StartDate ,observation_end = EndDate ))
value <- rep("value.", 50)
nums <- seq(1, 50, 1)
names <- as.data.frame(paste(value, nums, sep=""))
names <- rbind(names, c("value"))
colnames(names) <- "names"
names <- as.data.frame(sort(names$names))
colnames(names) <- "names"
names <- as.vector(t(names))
date <- FREDData %>%
dplyr::select(date)
Rates <- FREDData %>%
dplyr::select(one_of(names))
FREDData <- Rates %>%
mutate(date = date)
colnames(FREDData) <- c("Florida", "California", "Texas", "Ohio","New York", "Michigan", "Pennsylvania", "North Carolina", "Wisconsin", "Illinois", "Missouri", "New Jersey", "Oregon", "Tennessee", "Minnesota", "Alabama", "South Carolina", "Washington",
"Kentucky", "Georgia", "West Virginia", "Indiana", "Colorado", "Arizona", "Oklahoma", "Louisiana", "Massachusetts", "Arkansas", "New Mexico", "Montana", "Hawaii", "Virginia", "Iowa", "Nevada", "Kansas",
"Idaho", "Mississippi", "Maine", "Connecticut", "Utah", "Alaska", "Maryland", "South Dakota", "North Dakota", "New Hampshire", "Nebraska", "Wyoming", "Delaware", "Vermont", "Rhode Island", "Puerto Rico", "date"
)
averages <- as.data.frame(colMeans(FREDData[1:51][sapply(FREDData[1:51], is.numeric)]))
averages <- averages %>%
mutate(NAME = c("Florida", "California", "Texas", "Ohio","New York", "Michigan", "Pennsylvania", "North Carolina", "Wisconsin", "Illinois", "Missouri", "New Jersey", "Oregon", "Tennessee", "Minnesota", "Alabama", "South Carolina", "Washington",
"Kentucky", "Georgia", "West Virginia", "Indiana", "Colorado", "Arizona", "Oklahoma", "Louisiana", "Massachusetts", "Arkansas", "New Mexico", "Montana", "Hawaii", "Virginia", "Iowa", "Nevada", "Kansas",
"Idaho", "Mississippi", "Maine", "Connecticut", "Utah", "Alaska", "Maryland", "South Dakota", "North Dakota", "New Hampshire", "Nebraska", "Wyoming", "Delaware", "Vermont", "Rhode Island", "Puerto Rico"
))
colnames(averages) <- c("avg", "NAME")
ShortStateNames <- ShortStateNames %>%
gather("id", "name", 1:51)
states <- left_join(states, averages, by="NAME")
View(FREDData)
View(averages)
setwd('C:/Users/seanw/Dropbox/ECON430SeanWeenink/R/ECON430/Maps')
# Importing the BRW shock data
BRWShocks <- read.csv('./ShocksData/brw-shock-series.csv')
BRWShocks <- BRWShocks %>%
filter(month < "2018m1") %>%
dplyr::select("month", "BRW_monthly")
BRWShocks <- as.data.frame(BRWShocks)
BRWShocks <- na.omit(BRWShocks)
#sd <- sd(BRWShocks$BRW_monthly) For adjusting the shock size
# Define the function that produces IRF graphs
IRFGraph <- function(endog_data, shock, trend, conf){
# Endogenous data
endog_data <- as.data.frame(endog_data)
# Shock variable
shock <- as.data.frame(shock)
# Estimate linear model
results_lin_iv <- lp_lin_iv(endog_data = endog_data, lags_endog_lin = 12,
shock = shock, trend = trend,
confint = conf, hor = 30)
# Make and save linear plots
# Here I use ggplot rather than plot_lin since I can adjust the scale more easily and add multiple confidence intervals
mean <- as.data.frame(results_lin_iv[[1]]) %>%
gather("id", "mean", 1:30)
low <- as.data.frame(results_lin_iv[[2]]) %>%
gather("id", "low", 1:30)
high <- as.data.frame(results_lin_iv[[3]]) %>%
gather("id", "high", 1:30)
# Create a data frame with the mean, lower cf and upper cf
all <- left_join(mean, low, by="id") %>%
left_join(high, by="id") %>%
mutate(month = seq(1:30))
# Plot the graph
ggplot(data = all, aes(month, mean)) +
geom_ribbon(aes(ymin=low, ymax=high), fill="grey70", alpha=0.4) +
geom_line(aes(month, mean)) +
geom_line()+
geom_point(aes(x=month, y=mean)) + # points for each month
scale_x_continuous(name = "Months since shock", breaks=seq(1:30)) +
scale_y_continuous(name = "% change in unemployment")
}
# Creating and saving the IRF graphs for each state
# create a vector of column names for reference in the for loop
colnames <- colnames(FREDData)
for(i in 1:ncol(FREDData)-1){ # -1 to not include the date column
print(i)  # printing i as a check
#CSVFileName <- paste("./Output/",colnames[i],".png",sep="") # This names the the saved file for each state
print(IRFGraph(FREDData[i],BRWShocks$BRW_monthly, 1, 1.96))# to save the file it needs to display in the plot viewer. print() does this within a for loop or function
#png(CSVFileName)
#dev.off()
}
efine the function that produces IRF graphs
IRFGraph <- function(endog_data, shock, trend, conf){
# Endogenous data
endog_data <- as.data.frame(endog_data)
# Shock variable
shock <- as.data.frame(shock)
# Estimate linear model
results_lin_iv <- lp_lin_iv(endog_data = endog_data, lags_endog_lin = 12,
shock = shock, trend = trend,
confint = conf, hor = 30)
# Make and save linear plots
# Here I use ggplot rather than plot_lin since I can adjust the scale more easily and add multiple confidence intervals
mean <- as.data.frame(results_lin_iv[[1]]) %>%
gather("id", "mean", 1:30)
low <- as.data.frame(results_lin_iv[[2]]) %>%
gather("id", "low", 1:30)
high <- as.data.frame(results_lin_iv[[3]]) %>%
gather("id", "high", 1:30)
# Create a data frame with the mean, lower cf and upper cf
all <- left_join(mean, low, by="id") %>%
left_join(high, by="id") %>%
mutate(month = seq(1:30))
# Plot the graph
ggplot(data = all, aes(month, mean)) +
geom_ribbon(aes(ymin=low, ymax=high), fill="grey70", alpha=0.4) +
geom_line(aes(month, mean)) +
geom_line()+
geom_point(aes(x=month, y=mean)) + # points for each month
scale_x_continuous(name = "Months since shock", breaks=seq(1:30)) +
scale_y_continuous(name = "% change in unemployment")
}
IRFGraph(FREDData[1],BRWShocks$BRW_monthly, 1, 1.96)
Define the function that produces IRF graphs
IRFGraph <- function(endog_data, shock, trend, conf){
# Endogenous data
endog_data <- as.data.frame(endog_data)
# Shock variable
shock <- as.data.frame(shock)
# Estimate linear model
results_lin_iv <- lp_lin_iv(endog_data = endog_data, lags_endog_lin = 12,
shock = shock, trend = trend,
confint = conf, hor = 30)
# Make and save linear plots
# Here I use ggplot rather than plot_lin since I can adjust the scale more easily and add multiple confidence intervals
mean <- as.data.frame(results_lin_iv[[1]]) %>%
gather("id", "mean", 1:30)
low <- as.data.frame(results_lin_iv[[2]]) %>%
gather("id", "low", 1:30)
high <- as.data.frame(results_lin_iv[[3]]) %>%
gather("id", "high", 1:30)
# Create a data frame with the mean, lower cf and upper cf
all <- left_join(mean, low, by="id") %>%
left_join(high, by="id") %>%
mutate(month = seq(1:30))
# Plot the graph
ggplot(data = all, aes(month, mean)) +
geom_ribbon(aes(ymin=low, ymax=high), fill="grey70", alpha=0.4) +
geom_line(aes(month, mean)) +
geom_line()+
geom_point(aes(x=month, y=mean)) + # points for each month
scale_x_continuous(name = "Months since shock", breaks=seq(1:30)) +
scale_y_continuous(name = "% change in unemployment") +
theme_minimal()
}
IRFGraph(FREDData[1],BRWShocks$BRW_monthly, 1, 1.96)
IRFGraph <- function(endog_data, shock, trend, conf){
# Endogenous data
endog_data <- as.data.frame(endog_data)
# Shock variable
shock <- as.data.frame(shock)
# Estimate linear model
results_lin_iv <- lp_lin_iv(endog_data = endog_data, lags_endog_lin = 12,
shock = shock, trend = trend,
confint = conf, hor = 30)
# Make and save linear plots
# Here I use ggplot rather than plot_lin since I can adjust the scale more easily and add multiple confidence intervals
mean <- as.data.frame(results_lin_iv[[1]]) %>%
gather("id", "mean", 1:30)
low <- as.data.frame(results_lin_iv[[2]]) %>%
gather("id", "low", 1:30)
high <- as.data.frame(results_lin_iv[[3]]) %>%
gather("id", "high", 1:30)
# Create a data frame with the mean, lower cf and upper cf
all <- left_join(mean, low, by="id") %>%
left_join(high, by="id") %>%
mutate(month = seq(1:30))
# Plot the graph
ggplot(data = all, aes(month, mean)) +
geom_ribbon(aes(ymin=low, ymax=high), fill="grey70", alpha=0.4) +
geom_line(aes(month, mean)) +
geom_line()+
geom_point(aes(x=month, y=mean)) + # points for each month
scale_x_continuous(name = "Months since shock", breaks=seq(1:30)) +
scale_y_continuous(name = "% change in unemployment") +
theme_minimal() +
geom_hline(0, linetype, color, size)
}
IRFGraph(FREDData[1],BRWShocks$BRW_monthly, 1, 1.96)
# Define the function that produces IRF graphs
IRFGraph <- function(endog_data, shock, trend, conf){
# Endogenous data
endog_data <- as.data.frame(endog_data)
# Shock variable
shock <- as.data.frame(shock)
# Estimate linear model
results_lin_iv <- lp_lin_iv(endog_data = endog_data, lags_endog_lin = 12,
shock = shock, trend = trend,
confint = conf, hor = 30)
# Make and save linear plots
# Here I use ggplot rather than plot_lin since I can adjust the scale more easily and add multiple confidence intervals
mean <- as.data.frame(results_lin_iv[[1]]) %>%
gather("id", "mean", 1:30)
low <- as.data.frame(results_lin_iv[[2]]) %>%
gather("id", "low", 1:30)
high <- as.data.frame(results_lin_iv[[3]]) %>%
gather("id", "high", 1:30)
# Create a data frame with the mean, lower cf and upper cf
all <- left_join(mean, low, by="id") %>%
left_join(high, by="id") %>%
mutate(month = seq(1:30))
# Plot the graph
ggplot(data = all, aes(month, mean)) +
geom_ribbon(aes(ymin=low, ymax=high), fill="grey70", alpha=0.4) +
geom_line(aes(month, mean)) +
geom_line()+
geom_point(aes(x=month, y=mean)) + # points for each month
scale_x_continuous(name = "Months since shock", breaks=seq(1:30)) +
scale_y_continuous(name = "% change in unemployment") +
theme_minimal() +
geom_hline(0, linetype="dashed", color="red", size=1)
}
IRFGraph(FREDData[1],BRWShocks$BRW_monthly, 1, 1.96)
BRWShocks <- na.omit(BRWShocks)
#sd <- sd(BRWShocks$BRW_monthly) For adjusting the shock size
# Define the function that produces IRF graphs
IRFGraph <- function(endog_data, shock, trend, conf){
# Endogenous data
endog_data <- as.data.frame(endog_data)
# Shock variable
shock <- as.data.frame(shock)
# Estimate linear model
results_lin_iv <- lp_lin_iv(endog_data = endog_data, lags_endog_lin = 12,
shock = shock, trend = trend,
confint = conf, hor = 30)
# Make and save linear plots
# Here I use ggplot rather than plot_lin since I can adjust the scale more easily and add multiple confidence intervals
mean <- as.data.frame(results_lin_iv[[1]]) %>%
gather("id", "mean", 1:30)
low <- as.data.frame(results_lin_iv[[2]]) %>%
gather("id", "low", 1:30)
high <- as.data.frame(results_lin_iv[[3]]) %>%
gather("id", "high", 1:30)
# Create a data frame with the mean, lower cf and upper cf
all <- left_join(mean, low, by="id") %>%
left_join(high, by="id") %>%
mutate(month = seq(1:30))
# Plot the graph
ggplot(data = all, aes(month, mean)) +
geom_ribbon(aes(ymin=low, ymax=high), fill="grey70", alpha=0.4) +
geom_line(aes(month, mean)) +
geom_line()+
geom_point(aes(x=month, y=mean)) + # points for each month
scale_x_continuous(name = "Months since shock", breaks=seq(1:30)) +
scale_y_continuous(name = "% change in unemployment") +
theme_minimal() +
geom_hline(yintercept=0, linetype="dashed", color="red", size=1)
}
IRFGraph(FREDData[1],BRWShocks$BRW_monthly, 1, 1.96)
# create a vector of column names for reference in the for loop
colnames <- colnames(FREDData)
for(i in 1:ncol(FREDData)-1){ # -1 to not include the date column
print(i)  # printing i as a check
CSVFileName <- paste("./Output/",colnames[i],".png",sep="") # This names the the saved file for each state
print(IRFGraph(FREDData[i],BRWShocks$BRW_monthly, 1, 1.96))# to save the file it needs to display in the plot viewer. print() does this within a for loop or function
png(CSVFileName)
dev.off()
}
View(FREDData)
IRFGraph <- function(endog_data, shock, trend, conf){
# Endogenous data
endog_data <- as.data.frame(endog_data)
# Shock variable
shock <- as.data.frame(shock)
# Estimate linear model
results_lin_iv <- lp_lin_iv(endog_data = endog_data, lags_endog_lin = 12,
shock = shock, trend = trend,
confint = conf, hor = 30)
# Make and save linear plots
# Here I use ggplot rather than plot_lin since I can adjust the scale more easily and add multiple confidence intervals
mean <- as.data.frame(results_lin_iv[[1]]) %>%
gather("id", "mean", 1:30)
low <- as.data.frame(results_lin_iv[[2]]) %>%
gather("id", "low", 1:30)
high <- as.data.frame(results_lin_iv[[3]]) %>%
gather("id", "high", 1:30)
# Create a data frame with the mean, lower cf and upper cf
all <- left_join(mean, low, by="id") %>%
left_join(high, by="id") %>%
mutate(month = seq(1:30))
# Plot the graph
ggplot(data = all, aes(month, mean)) +
geom_ribbon(aes(ymin=low, ymax=high), fill="grey70", alpha=0.4) +
geom_line(aes(month, mean)) +
geom_line()+
geom_point(aes(x=month, y=mean)) + # points for each month
scale_x_continuous(name = "Months since shock", breaks=seq(1:30)) +
scale_y_continuous(name = "% change in unemployment") +
theme_minimal() +
geom_hline(yintercept=0, linetype="dashed", color="red", size=1)
}
for(i in 1:ncol(FREDData)-1){ # -1 to not include the date column
print(i)  # printing i as a check
CSVFileName <- paste("./Output/",colnames[i],".png",sep="") # This names the the saved file for each state
print(IRFGraph(FREDData[i],BRWShocks$BRW_monthly, 1, 1.96))# to save the file it needs to display in the plot viewer. print() does this within a for loop or function
png(CSVFileName)
dev.off()
}
FREDData[1]
colnames[1]
colnames <- colnames(FREDData)
for(i in 1:ncol(FREDData)-1){ # -1 to not include the date column
print(i)  # printing i as a check
CSVFileName <- paste("./Output/",colnames[i],".png",sep="") # This names the the saved file for each state
print(IRFGraph(FREDData[i],BRWShocks$BRW_monthly, 1, 1.96))# to save the file it needs to display in the plot viewer. print() does this within a for loop or function
png(CSVFileName)
dev.off()
}
for(i in 2:ncol(FREDData)-1){ # -1 to not include the date column
print(i)  # printing i as a check
CSVFileName <- paste("./Output/",colnames[i],".png",sep="") # This names the the saved file for each state
print(IRFGraph(FREDData[i],BRWShocks$BRW_monthly, 1, 1.96))# to save the file it needs to display in the plot viewer. print() does this within a for loop or function
png(CSVFileName)
dev.off()
}
colnames <- colnames(FREDData)
for(i in 2:ncol(FREDData)-1){ # -1 to not include the date column
print(i)  # printing i as a check
CSVFileName <- paste("./Output/",colnames[i],".png",sep="") # This names the the saved file for each state
png(CSVFileName)
print(IRFGraph(FREDData[i],BRWShocks$BRW_monthly, 1, 1.96))# to save the file it needs to display in the plot viewer. print() does this within a for loop or function
dev.off()
}
